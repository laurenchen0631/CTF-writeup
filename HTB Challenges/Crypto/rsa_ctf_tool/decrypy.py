from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long

# find RSA private key via RsaCTFTool: `python RsaCtfTool.py --publickey ./pubkey.pem --private`
n = 10410080216253956216713537817182443360779235033823514652866757961082890116671874771565125457104853470727423173827404139905383330210096904014560996952285911**3
d = 129275315911223317359903751663807516352090026808195570114389567583720564611378335627134085402837298827247544997735787221623420069090831026403341043627337118073514316414863510575197151252044137503590414785481554107787977492191190932914467213110568469344259204522660239854742719334572977699979751357274672629248833545002097445009562614595500619383316585368090022534207869125569280525912198666917266810668438225654808711335777444218772562879952971915504193507508773

with open('key', "r") as f:
    k = bytes.fromhex(f.read())

with open("flag.txt.aes", "rb") as f:
    c = f.read()
    c = c.removesuffix(b"\n")

# key file is encrypted with RSA private key
k = bytes_to_long(k)
k = pow(k, d, n)
k = long_to_bytes(k)

print(k)

cipher = AES.new(k, AES.MODE_ECB)
m = cipher.decrypt(c)
print(m)